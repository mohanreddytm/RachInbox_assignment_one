version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: reachinbox-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - reachinbox-network
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: pgvector/pgvector:pg16
    container_name: reachinbox-postgres-prod
    environment:
      - POSTGRES_DB=reachinbox
      - POSTGRES_USER=reachinbox
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-reachinbox123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - reachinbox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reachinbox -d reachinbox"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: reachinbox-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - reachinbox-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: reachinbox-backend-prod
    environment:
      - NODE_ENV=production
      - PORT=3001
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - POSTGRES_URL=postgresql://reachinbox:${POSTGRES_PASSWORD:-reachinbox123}@postgres:5432/reachinbox
      - REDIS_URL=redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reachinbox-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: reachinbox-frontend-prod
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - reachinbox-network
    restart: unless-stopped

volumes:
  elasticsearch_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  reachinbox-network:
    driver: bridge
